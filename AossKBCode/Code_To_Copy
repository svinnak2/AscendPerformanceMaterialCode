from fastapi import FastAPI, UploadFile, File
from pydantic import BaseModel
import boto3
import json
import io
from PIL import Image
import base64

# Initialize FastAPI app
app = FastAPI()

# Initialize AWS Bedrock client
bedrock_runtime = boto3.client("bedrock-runtime")

# Request Model
class RequestData(BaseModel):
    model_id: str
    user_task: str
    streaming: bool = False

def load_image(image: UploadFile):
    """Convert uploaded image to base64."""
    try:
        image_data = image.file.read()
        return base64.b64encode(image_data).decode("utf-8")
    except Exception as e:
        print(f"Error processing image: {e}")
        return None

def send_request_to_llm(model_id, user_task, streaming, image_base64=None):
    """Send request to AWS Bedrock."""
    payload = {
        "prompt": user_task,
        "max_tokens": 500,  # Adjust as needed
        "temperature": 0.7,
        "stream": streaming
    }

    if image_base64:
        payload["image"] = image_base64  # Include image if provided

    try:
        response = bedrock_runtime.invoke_model(
            modelId=model_id,
            contentType="application/json",
            accept="application/json",
            body=json.dumps(payload)
        )

        response_body = json.loads(response["body"].read())
        return {"status": "success", "text": response_body.get("completion", "No response")}

    except Exception as e:
        return {"status": "error", "text": str(e)}

@app.post("/generate")
async def generate_response(data: RequestData, image: UploadFile = File(None)):
    """API endpoint to process text and optional image."""
    image_base64 = None
    if image:
        image_base64 = load_image(image)

    result = send_request_to_llm(data.model_id, data.user_task, data.streaming, image_base64)
    return result

