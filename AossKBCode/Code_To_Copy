import boto3
import xml.etree.ElementTree as ET
import os
import html
import re

# ✅ Define S3 details
bucket_name = "your-bucket-name"  # Replace with your actual S3 bucket name
s3_key = "your-folder-name/COMPTIME.XML"  # S3 file path (adjust if needed)

# ✅ Define local save directory
local_directory = "/home/ec2"  # Adjust if needed
os.makedirs(local_directory, exist_ok=True)  # Ensure directory exists

# ✅ Define S3 client
s3_client = boto3.client("s3")

# ✅ Define local file path to temporarily store the XML
local_xml_path = os.path.join(local_directory, "COMPTIME.XML")

# ✅ Download XML file from S3
try:
    s3_client.download_file(bucket_name, s3_key, local_xml_path)
    print(f"✅ XML file downloaded from S3: {local_xml_path}")
except Exception as e:
    print(f"❌ Error downloading XML file: {e}")
    exit()

# ✅ Function to clean XML content
def clean_xml_text(text):
    if text:
        text = html.unescape(text)  # Convert &gt; → >, &lt; → <, etc.
        text = re.sub(r'[\r\n\t]', '', text)  # Remove newlines, carriage returns, tabs
        text = text.strip()  # Trim extra spaces
    return text

# ✅ Parse the XML file
try:
    tree = ET.parse(local_xml_path)
    root = tree.getroot()

    # ✅ Clean all text and tail content in XML elements
    for elem in root.iter():
        if elem.text:
            elem.text = clean_xml_text(elem.text)
        if elem.tail:
            elem.tail = clean_xml_text(elem.tail)

    # ✅ Define tags to extract
    tags_to_extract = ["SOURCE", "TRANSFORMATION", "TARGET"]

    # ✅ Iterate through specified tags and extract elements
    for tag in tags_to_extract:
        for element in root.findall(f".//{tag}"):
            name_attr = element.get("NAME")  # Extract NAME attribute
            if name_attr:
                file_name = f"{name_attr}.xml"  # Create file name
                file_path = os.path.join(local_directory, file_name)

                # Convert the cleaned XML element to string format
                element_string = ET.tostring(element, encoding="unicode")

                # ✅ Save each extracted element as a separate XML file
                with open(file_path, "w", encoding="utf-8") as file:
                    file.write(f'<?xml version="1.0" encoding="UTF-8"?>\n')
                    file.write(element_string)

                print(f"✅ Extracted and saved: {file_path}")

except Exception as e:
    print(f"❌ Error processing XML file: {e}")
