import os
import csv
import pandas as pd
from docx import Document
from html.parser import HTMLParser
from xlrd import open_workbook  # For .xls files
import mammoth  # For .doc files

# Function to read .txt files
def read_txt(file_path):
    with open(file_path, 'r', encoding='utf-8') as file:
        return file.read()

# Function to read .csv files
def read_csv(file_path):
    return pd.read_csv(file_path)

# Function to read .xlsx files
def read_xlsx(file_path):
    return pd.read_excel(file_path, engine='openpyxl')

# Function to read .xls files
def read_xls(file_path):
    return pd.read_excel(file_path, engine='xlrd')

# Function to read .html files
def read_html(file_path):
    return pd.read_html(file_path)

# Function to read .docx files
def read_docx(file_path):
    doc = Document(file_path)
    return '\n'.join([para.text for para in doc.paragraphs])

# Function to read .doc files
def read_doc(file_path):
    with open(file_path, 'rb') as file:
        result = mammoth.extract_raw_text(file)
        return result.value

# Main function to handle file reading based on extension
def read_file(file_path):
    ext = os.path.splitext(file_path)[1].lower()
    if ext == '.txt':
        return read_txt(file_path)
    elif ext == '.csv':
        return read_csv(file_path)
    elif ext == '.xlsx':
        return read_xlsx(file_path)
    elif ext == '.xls':
        return read_xls(file_path)
    elif ext == '.html':
        return read_html(file_path)
    elif ext == '.docx':
        return read_docx(file_path)
    elif ext == '.doc':
        return read_doc(file_path)
    else:
        raise ValueError(f"Unsupported file format: {ext}")

# Example usage
if __name__ == "__main__":
    file_path = input("Enter the file path: ")
    try:
        content = read_file(file_path)
        print("File content:")
        print(content)
    except Exception as e:
        print(f"Error reading file: {e}")
