from datetime import datetime

# List of file names
file_names = [
    "Charles_Schwab_2024_Proxy_EarningsReports 9 Claude_Org Bkg.docx",
    "schw_Sept2024_SMART_supplement EarningsReports 9_Claude Org_Bkg.docx",
    "FRY9C 1026632 20240930 CallReports 7_Claude Org_Bkg.docx",
    "schwab_annual_report_2023_part1_EarningsReports 9 Claude_Org Bkg.docx",
    "FFIEC101 1026632 20240930 CallReports 7 Claude Org_Bkg.docx",
    "schw fall_business update 10152024 BsnsUpdates 9 Claude_Org_Bkg.docx",
    "SEC Form10k 2023_TenQK 2 Claude Org_Bkg.docx",
    "SEC Form100 093024 TenQK 2 Claude Org Bkg.docx",
    "schwab_q3_2024 earnings_release EarningsReports_9_Claude_Org_Bkg.docx",
    "schwab_annual_report_2023_part0_EarningsReports_9_Claude_Org_Bkg.docx",
    "BHCPR 1026632 20240630 CallReports 7_Claude_Org Bkg.docx"
]

# Function to extract date and convert to a sortable datetime object
def extract_date(file_name):
    # Look for YYYYMMDD or MMDDYY patterns
    patterns = [
        r"(\d{8})",          # Matches YYYYMMDD
        r"(\d{6})",          # Matches MMDDYY
        r"(\b\d{4}\b)"       # Matches standalone year YYYY
    ]
    for pattern in patterns:
        match = re.search(pattern, file_name)
        if match:
            date_str = match.group(0)
            try:
                # Try to parse YYYYMMDD
                if len(date_str) == 8:
                    return datetime.strptime(date_str, "%Y%m%d")
                # Try to parse MMDDYY
                elif len(date_str) == 6:
                    return datetime.strptime(date_str, "%m%d%y")
                # Parse standalone year
                elif len(date_str) == 4:
                    return datetime.strptime(date_str, "%Y")
            except ValueError:
                continue
    return datetime.min  # Default for files with no recognizable date

# Sort files based on extracted dates
sorted_files = sorted(file_names, key=extract_date)

# Print sorted file names
for file in sorted_files:
    print(file)
